using SparseArrays

"""
do_isotropic_elliptic_assembly(cells, points, a, f)

Does assembly of sparse Galerkin operator and right hand side 
for 2D P1 finite elements with a given triangulation (cells, points).

Input:

cells[1:3, 1:nel]: Global node indices of local nodes in each element
cells[1, iel]: Global node index of 1st node of element iel ∈ [1, nel]
cells[2, iel]: Global node index of 2nd node of element iel ∈ [1, nel]
cells[3, iel]: Global node index of 3rd node of element iel ∈ [1, nel]

points[1:2, 1:nnode]: coordinates of all nodal points
points[1, inode]: x-coordinate of global node indexed inode ∈ [1, nnode]
points[2, inode]: y-coordinate of global node indexed inode ∈ [1, nnode]

a: function(x::Float64, y::Float64)::Float64 > 0 ∀ x, y

f: function(x::Float64, y::Float64)::Float64

Output:

A_mat: sparse array of Galerkin formulation (nnode-by-nnode)
       with components A_mat_ij = ∫_Ω a ∇ϕ_i ⋅ ∇ϕ_j dΩ where 
       a: Ω → R is interpolated at the nodes in Span {ϕ_k}_{k=1}^nnode.

b_vec: right hand side vector of Galerkin formulation (nnode-by-1)
       with components b_vec_i = ∫_Ω f ϕ_i dΩ where f: Ω → R is 
       interpolated at the nodes in Span {ϕ_k}_{k=1}^nnode.

# Examples
```jldoctest
julia>
using TriangleMesh
using Fem

poly = polygon_Lshape()
mesh = create_mesh(poly, info_str="my mesh", voronoi=true, delaunay=true, set_area_max=true)

function a(x::Float64, y::Float64)
  return 1. + x * y
end

function f(x::Float64, y::Float64)
  return -1.
end

# Assembly for 1_165_446 DoFs
A, b = @time do_isotropic_elliptic_assembly(mesh.cell, mesh.point)

Maximum triangle area: .0000005
  2.584544 seconds (685.03 k allocations: 1.228 GiB, 10.03% gc time)

```
"""
function do_isotropic_elliptic_assembly(cells, points, a, f)
  _, nel = size(cells) # Number of elements
  _, nnode = size(points) # Number of nodes
  I, J, V = Int[], Int[], Float64[] # Indices (I, J) and data (V) for sparse Galerkin operator
  b_vec = zeros(nnode, 1) # Right hand side
  x, y = zeros(3), zeros(3) # (x, y) coordinates of element vertices
  Δx, Δy = zeros(3), zeros(3), zeros(3)
  
  # Loop over elements
  for iel in 1:nel
    
    # Get (x, y) coordinates of each element vertex
    # and coefficient at the center of the element
    coeff = 0.
    for j in 1:3
      jj = cells[j, iel]
      x[j], y[j] = points[1, jj], points[2, jj]
      coeff += a(x[j], y[j])
    end
    coeff /= 3.
    
    # Terms of the shoelace formula for a triangle
    Δx[1] = x[3] - x[2]
    Δx[2] = x[1] - x[3]
    Δx[3] = x[2] - x[1]
    Δy[1] = y[2] - y[3]
    Δy[2] = y[3] - y[1]
    Δy[3] = y[1] - y[2]
    
    # Area of element
    Area = (Δx[3] * Δy[2] - Δx[2] * Δy[3]) / 2.
    
    # Loop over vertices of element
    for i in 1:3
      ii = cells[i, iel]

      # Loop over vertices of element
      for j in 1:3

        # Store local contribution
        Kij = coeff * (Δy[i] * Δy[j] + Δx[i] * Δx[j]) / 4 / Area
        jj = cells[j, iel]
        push!(I, ii)
        push!(J, jj)
        push!(V, Kij)
      end
    end
    
    # Add right hand side contributions from element
    for i in 1:3
      j = i + 1 - floor(Int, (i + 1) / 3) * 3
      j == 0 ? j = 3 : nothing
      k = i + 2 - floor(Int, (i + 2) / 3) * 3
      k == 0 ? k = 3 : nothing
      ii = cells[i, iel]
      b_vec[ii] += (2 * f(x[i], y[i]) 
                      + f(x[j], y[j])
                      + f(x[k], y[k])) * Area / 12
    end
  end
  
  # Assemble sparse array of Galerkin operator
  A_mat = sparse(I, J, V)
  
  return A_mat, b_vec
end


"""
do_covariance_mass_assembly(cells, points, cov)

Assembles Galerkin kernel operator generated by the covariance function
cov with 2D P1 finite elements with a given triangulation (cells, points).

Input:

cells[1:3, 1:nel]: Global node indices of local nodes in each element
cells[1, iel]: Global node index of 1st node of element iel ∈ [1, nel]
cells[2, iel]: Global node index of 2nd node of element iel ∈ [1, nel]
cells[3, iel]: Global node index of 3rd node of element iel ∈ [1, nel]

points[1:2, 1:nnode]: coordinates of all nodal points
points[1, inode]: x-coordinate of global node indexed inode ∈ [1, nnode]
points[2, inode]: y-coordinate of global node indexed inode ∈ [1, nnode]

cov: function(x1::Float64, y1::Float64, x2::Float64, y2::Float64)::Float64 

Output:

C: Array of Galerkin formulation (nnode-by-nnode)
   with components C_ij = ∫_Ω ϕ_i(P) ∫_{Ω'} cov(P, P') ϕ_j(P') dΩ' dΩ.

# Examples
```jldoctest
julia>
using TriangleMesh
using Fem

poly = polygon_Lshape()
mesh = create_mesh(poly, info_str="my mesh", voronoi=true, delaunay=true, set_area_max=true)

function cov(x1::Float64, y1::Float64, x2::Float64, y2::Float64)
  L = .1
  return exp(-((x1 - x2)^ 2 + (y1 - y2)^2) / L^2)
end

# Assembly for 11_894 DoFs
C = @time do_mass_covariance_assembly(mesh.cell, mesh.point, cov)

Maximum triangle area: .00005
 90.211575 seconds (243.67 k allocations: 2.121 GiB, 0.01% gc time)

```
"""
function do_mass_covariance_assembly(cells, p, cov)
  _, nel = size(cells) # Number of elements
  _, nnode = size(points) # Number of nodes
  R = zeros(nnode, nnode) # R[i, j] ≈ ∑_e ∫_{Ω'_e} ϕ_i(P') cov(P', P_j) dΩ'
  C = zeros(nnode, nnode) # C[i, j] ≈ ∫_Ω ϕ_i(P) ∫_{Ω'} cov(P, P') ϕ_j(P') dΩ' dΩ.
  x, y = zeros(3), zeros(3) # (x, y) coordinates of element vertices
  Δx, Δy = zeros(3), zeros(3), zeros(3) # Used to store terms of shoelace formula
  Area = zeros(nel) # Used to store element areas
  
  # Loop over mesh nodes
  for j in 1:nnode
    
    # Get coordinates of node
    xj = points[1, j]
    yj = points[2, j]
    
    # Loop over elements
    for iel in 1:nel
      
      # Get (x, y) coordinates of each element vertex
      # and coefficient at the center of the element
      for r in 1:3
        rr = cells[r, iel]
        x[r], y[r] = points[1, rr], points[2, rr]
      end
      
      # Terms of the shoelace formula for a triangle
      Δx[1] = x[3] - x[2]
      Δx[2] = x[1] - x[3]
      Δx[3] = x[2] - x[1]
      Δy[1] = y[2] - y[3]
      Δy[2] = y[3] - y[1]
      Δy[3] = y[1] - y[2]
      
      # Area of element
      Area_iel = (Δx[3] * Δy[2] - Δx[2] * Δy[3]) / 2.
      Area[iel] = Area_iel
      
      # Add local contributions
      for r in 1:3
        s = r + 1 - floor(Int, (r + 1) / 3) * 3
        s == 0 ? s = 3 : nothing
        t = r + 2 - floor(Int, (r + 2) / 3) * 3
        t == 0 ? t = 3 : nothing
        i = cells[r, iel]
        R[i, j] += (2 * cov(x[r], y[r], xj, yj) 
                      + cov(x[s], y[s], xj, yj) 
                      + cov(x[t], y[t], xj, yj)) * Area_iel / 12
      end
    end
  end
  
  # Loop over mesh nodes
  for i in 1:nnode
    
    # Loop over elements
    for iel in 1:nel
      
      # Get area of element
      Area_iel = Area[iel]
      
      # Add local contributions
      for r in 1:3
        s = r + 1 - floor(Int, (r + 1) / 3) * 3
        s == 0 ? s = 3 : nothing
        t = r + 2 - floor(Int, (r + 2) / 3) * 3
        t == 0 ? t = 3 : nothing
        j = cells[r, iel]
        k = cells[s, iel]
        ℓ = cells[t, iel]
        C[i, j] += (2 * R[i, j] 
                      + R[i, k]  
                      + R[i, ℓ]) * Area_iel / 12
      end
    end
  end
  
  return C
end


"""
get_mass_matrix(cells, points)

Gets mass matrix of linear form using 2D P1 finite elements with a 
given triangulation (cells, points).

Input:

cells[1:3, 1:nel]: Global node indices of local nodes in each element
cells[1, iel]: Global node index of 1st node of element iel ∈ [1, nel]
cells[2, iel]: Global node index of 2nd node of element iel ∈ [1, nel]
cells[3, iel]: Global node index of 3rd node of element iel ∈ [1, nel]

points[1:2, 1:nnode]: coordinates of all nodal points
points[1, inode]: x-coordinate of global node indexed inode ∈ [1, nnode]
points[2, inode]: y-coordinate of global node indexed inode ∈ [1, nnode]

Output:

M: Masss matrix formulation (nnode-by-nnode) with components 
   M_ij = ∫_Ω ϕ_i(P) ϕ_j(P) dΩ.

# Examples
```jldoctest
julia>
using TriangleMesh
using Fem

poly = polygon_Lshape()
mesh = create_mesh(poly, info_str="my mesh", voronoi=true, delaunay=true, set_area_max=true)

# Assembly for 11_894 DoFs
M = @time get_mass_matrix(mesh.cell, mesh.point)

Maximum triangle area: .00005
  0.337066 seconds (595.71 k allocations: 44.153 MiB)

```
"""
function get_mass_matrix(cells, points)
  _, nel = size(cells) # Number of elements
  _, nnode = size(points) # Number of cells
  I, J, V = Int[], Int[], Float64[] # Indices (I, J) and data (V) for mass matrix
  x, y = zeros(3), zeros(3) # (x, y) coordinates of element vertices
  Δx, Δy = zeros(3), zeros(3), zeros(3) # Used to store terms of shoelace formula
  
  # Loop over elements
  for iel in 1:nel
    
    # Get (x, y) coordinates of each element vertex
    # and coefficient at the center of the element
    for r in 1:3
      rr = cells[r, iel]
      x[r], y[r] = points[1, rr], points[2, rr]
    end
    
    # Terms of the shoelace formula for a triangle
    Δx[1] = x[3] - x[2]
    Δx[2] = x[1] - x[3]
    Δx[3] = x[2] - x[1]
    Δy[1] = y[2] - y[3]
    Δy[2] = y[3] - y[1]
    Δy[3] = y[1] - y[2]
    
    # Area of element
    Area = (Δx[3] * Δy[2] - Δx[2] * Δy[3]) / 2.
    
    # Loop over vertices of element
    for i in 1:3
      ii = cells[i, iel]

      # Loop over vertices of element
      for j in 1:3
        
        # Store local contribution
        if i == j
          Kij = Area / 6.
        else
          Kij = Area / 12.
        end
        jj = cells[j, iel]
        push!(I, ii)
        push!(J, jj)
        push!(V, Kij)
      end
    end
  end
  
  # Assemble sparse mass matrix
  M = sparse(I, J, V)
  
  return M
end